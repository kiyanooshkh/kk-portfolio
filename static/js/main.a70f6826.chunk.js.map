{"version":3,"sources":["images/kiyanoosh-logo.svg","images/kiyanoosh-profile.jpg","components/menu.jsx","components/nav.jsx","components/avatar.jsx","components/carousel.jsx","common/colors.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","withStyles","fontColor","color","props","classes","Button","className","flex","flexGrow","AppBar","position","Toolbar","Typography","variant","alt","src","logo","row","marginTop","avatar","margin","width","height","text","textAlign","textTransform","fontSize","Avatar","profile","name","styles","display","justifyContent","background","button","marginBottom","backgroundColor","paddingRight","paddingLeft","borderRadius","Chip","label","chip","App","Component","render","theme","createMuiTheme","palette","primary","main","secondary","blue","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,+C,+PCoB5BC,kBAhBA,CACbC,UAAW,CACTC,MAAM,SAcKF,EAVf,SAAeG,GAAQ,MACbC,EAAYD,EAAZC,QACJ,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,UAAWF,EAAQH,WAA3B,SACA,kBAACI,EAAA,EAAD,CAAQC,UAAWF,EAAQH,WAA3B,e,6BCeKD,kBApBA,CACbO,KAAM,CACJC,SAAU,IAkBCR,EAdf,SAAoBG,GAAQ,MAClBC,EAAYD,EAAZC,QACR,OACI,kBAACK,EAAA,EAAD,CAAQC,SAAS,SACjB,kBAACC,EAAA,EAAD,CAASL,UAAU,aACf,kBAACM,EAAA,EAAD,CAAYC,QAAQ,QAAQX,MAAM,UAAUI,UAAWF,EAAQG,MAC7D,yBAAKD,UAAU,OAAOQ,IAAI,iBAAiBC,IAAKC,OAElD,kBAAC,EAAD,W,6BCSKhB,kBA5BA,CACbiB,IAAK,CACHC,UAAU,IAEZC,OAAQ,CACNC,OAAO,SACPC,MAAO,IACPC,OAAQ,KAEVC,KAAK,CACHC,UAAU,SACVtB,MAAO,OACPuB,cAAc,YACdC,SAAU,KAeC1B,EAXf,SAAiBG,GAAQ,MACfC,EAAYD,EAAZC,QAER,OACE,yBAAKE,UAAWF,EAAQa,KACtB,kBAACU,EAAA,EAAD,CAAQb,IAAI,gBAAgBC,IAAKa,IAAStB,UAAWF,EAAQe,SAC7D,uBAAGb,UAAWF,EAAQmB,MAAOpB,EAAM0B,U,QCrBzC,MAAMC,EAAS,CACbb,IAAK,CACHc,QAAS,OACTC,eAAgB,SAChBxB,SAAU,EACVyB,WCZgB,WDclBf,UAAW,CACTA,UAAW,IAEbgB,OAAQ,CACNhB,UAAW,GACXiB,aAAc,GACdC,gBAAiB,OACjBlC,MAAO,UACPmC,aAAa,GACbC,YAAY,GACZC,aAAc,IAyBHvC,kBAAW8B,EAAX9B,EArBf,SAAkBG,GAAQ,MAChBC,EAAYD,EAAZC,QACR,OACE,6BACE,yBAAKE,UAAWF,EAAQa,KACtB,yBAAKX,UAAWF,EAAQc,WACtB,kBAAC,EAAD,CAAQW,KAAK,qCAGjB,yBAAKvB,UAAWF,EAAQa,KACtB,kBAACuB,EAAA,EAAD,CAAMC,MAAM,gCAAgCnC,UAAWF,EAAQsC,QAEjE,yBAAKpC,UAAWF,EAAQa,KACtB,kBAACZ,EAAA,EAAD,CAAQQ,QAAQ,YAAYP,UAAWF,EAAQ8B,QAA/C,mBElCR,MAAMS,UAAYC,YAChBC,SACE,MAAMC,EAAQC,YACZ,CACEC,QAAS,CACPC,QAAS,CACPC,KDbQ,WCeVC,UAAWC,OAKjB,OACE,6BACC,kBAAC,IAAD,CAAkBN,MAAOA,GACzB,kBAAC,EAAD,MACA,kBAAC,EAAD,SAOQH,QCnBKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASb,OAAO,kBAAC,EAAD,MAASc,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.a70f6826.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kiyanoosh-logo.0df0a96b.svg\";","module.exports = __webpack_public_path__ + \"static/media/kiyanoosh-profile.92d457f8.jpg\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  fontColor: {\n    color:\"#fff\",\n  },\n};\n\nfunction Menu (props) { \n  const { classes } = props;\n      return (\n        <div>\n          <Button className={classes.fontColor}>About</Button>\n          <Button className={classes.fontColor}>Contact</Button>\n        </div>\n      );\n}\n\nexport default withStyles(styles)(Menu);\n\n  \n\n  \n ","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Menu from './menu';\nimport logo from '../images/kiyanoosh-logo.svg'\nimport '../scss/tools.scss';\nimport '../scss/nav.scss';\n\nconst styles = {\n  flex: {\n    flexGrow: 1,\n  },\n};\n\nfunction Navigation(props) {\n  const { classes } = props;\n  return (\n      <AppBar position=\"fixed\">\n      <Toolbar className=\"container\">\n          <Typography variant=\"title\" color=\"inherit\" className={classes.flex}>\n            <img className=\"logo\" alt=\"kiyanoosh logo\" src={logo} />\n          </Typography>\n          <Menu/>\n        </Toolbar>\n      </AppBar>\n  );\n}\n\nexport default withStyles(styles)(Navigation);\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport profile from '../images/kiyanoosh-profile.jpg';\n\nconst styles = {\n  row: {\n    marginTop:65,\n  },\n  avatar: {\n    margin:'0 auto',\n    width: 200,\n    height: 200,\n  },\n  text:{\n    textAlign:'center',\n    color: '#fff',\n    textTransform:'uppercase',\n    fontSize: 15,\n  }\n};\n\nfunction Avatars(props) {\n  const { classes } = props;\n\n  return (\n    <div className={classes.row}>\n      <Avatar alt=\"profile image\" src={profile} className={classes.avatar} />\n      <p className={classes.text}>{props.name}</p>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(Avatars);\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport * as color from '../common/colors';\nimport Avatar from './avatar';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\n\nconst styles = {\n  row: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexGrow: 1,\n    background: color.primaryblue\n  },\n  marginTop: {\n    marginTop: 60\n  },\n  button: {\n    marginTop: 60,\n    marginBottom: 30,\n    backgroundColor: '#fff',\n    color: '#9e9e9e',\n    paddingRight:25,\n    paddingLeft:25,\n    borderRadius: 2\n  }\n};\n\nfunction Carousel(props) {\n  const { classes } = props;\n  return (\n    <div>\n      <div className={classes.row}>\n        <div className={classes.marginTop}>\n          <Avatar name=\"KIYANOOSH KHOSRAVI - PORTFOLIO\" />\n        </div>\n      </div>\n      <div className={classes.row}>\n        <Chip label=\"Web Developer and UX Designer\" className={classes.chip} />\n      </div>\n      <div className={classes.row}>\n        <Button variant=\"contained\" className={classes.button}>\n          Learn More\n      </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(Carousel);\n","const primaryblue = '#0277BD';\n  \n  export {\n    primaryblue\n  };\n  ","import React, { Component } from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport Navigation from './components/nav';\nimport Carousel from './components/carousel';\nimport * as color from './common/colors';\n\nclass App extends Component {\n  render() {\n    const theme = createMuiTheme(\n      {\n        palette: {\n          primary: {\n            main:color.primaryblue\n          },\n          secondary: blue,\n        },\n      }\n    );\n\n    return (\n      <div>\n       <MuiThemeProvider theme={theme}>\n       <Navigation/>\n       <Carousel/>\n      </MuiThemeProvider>     \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}